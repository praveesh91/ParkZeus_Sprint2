{"ast":null,"code":"import _classCallCheck from\"/home/praveesh/workspace/parkzeus_latest/parkzeus/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/praveesh/workspace/parkzeus_latest/parkzeus/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/praveesh/workspace/parkzeus_latest/parkzeus/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/praveesh/workspace/parkzeus_latest/parkzeus/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/praveesh/workspace/parkzeus_latest/parkzeus/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import axios from'axios';import{Line,Bar}from'react-chartjs-2';var ChartContainer=/*#__PURE__*/function(_React$Component){_inherits(ChartContainer,_React$Component);function ChartContainer(props){var _this;_classCallCheck(this,ChartContainer);_this=_possibleConstructorReturn(this,_getPrototypeOf(ChartContainer).call(this,props));_this.graphData=function(){axios('https://praveesh91.github.io/test_json/parkingData.json').then(function(response){var parkingData=response.data.parkingData;// const values = parkingData.map(d => d.vehicles.booked)\n// const valus = parkingData.map(d => d.day)\nvar fillFlag=_this.state.fillFlag;console.log(\"fillFlagInComponentDidMount=\",fillFlag);var chartData=function chartData(canvas){var ctx=canvas.getContext(\"2d\");var solidRed='red';var gradient=ctx.createLinearGradient(0,0,0,450);gradient.addColorStop(0,'rgba(255, 0,0, 0.5)');gradient.addColorStop(0.5,'rgba(255, 0, 0, 0.25)');gradient.addColorStop(1,'rgba(255, 0, 0, 0)');return{labels:parkingData.map(function(k){return k.day;}),datasets:[{label:'Booked',fill:fillFlag?true:false,// fill: true,\ndata:parkingData.map(function(d){return d.vehicles.booked;}),backgroundColor:fillFlag?gradient:solidRed,borderColor:fillFlag?'transparent':'red'}// {\n//   label: 'Vacant',\n//   // fill: true,\n//   data: parkingData.map(d => d.vehicles.vacant),\n//   backgroundColor: 'blue',\n//   borderColor: 'blue',\n// },\n// {\n//   label: 'Occupied',\n//   // fill: 'false',\n//   data: parkingData.map(d => d.vehicles.occupied),\n//   backgroundColor: 'green',\n//   borderColor: 'green',\n// }\n]};};_this.setState({chartData:chartData});});};_this.graphType=function(){// const fillValue = {showLine ? true : false}\nvar Chart_type=_this.props.chartType;// console.log(\"Chart_type in ChartContainer is \",Chart_type);\nif(Chart_type==='Line'){_this.setState({showLine:true,showBar:false,showPie:false,fillFlag:false});}else if(Chart_type==='Bar'){_this.setState({showLine:false,showBar:true,showPie:false});}else if(Chart_type===\"Pie\"){_this.setState({showLine:false,showBar:false,showPie:true,fillFlag:true});}};_this.state={chartData:{},showLine:true,showBar:false,showPie:false,fillFlag:false};return _this;}_createClass(ChartContainer,[{key:\"componentDidMount\",value:function componentDidMount(){this.graphData();}},{key:\"render\",value:function render(){var _this$state=this.state,showLine=_this$state.showLine,showBar=_this$state.showBar,showPie=_this$state.showPie,chartData=_this$state.chartData,fillFlag=_this$state.fillFlag;console.log(\"chartData=\",chartData);console.log(\"fillFlagOutsideComponentDidMount=\",fillFlag);return React.createElement(\"div\",null,showLine&&React.createElement(Line,{data:chartData}),showBar&&React.createElement(Bar,{data:chartData}),showPie&&React.createElement(Line,{data:chartData}));}}]);return ChartContainer;}(React.Component);export default ChartContainer;","map":{"version":3,"sources":["/home/praveesh/workspace/parkzeus_latest/parkzeus/src/Components/Charts/ChartContainer/Chart.js"],"names":["React","axios","Line","Bar","ChartContainer","props","graphData","then","response","parkingData","data","fillFlag","state","console","log","chartData","canvas","ctx","getContext","solidRed","gradient","createLinearGradient","addColorStop","labels","map","k","day","datasets","label","fill","d","vehicles","booked","backgroundColor","borderColor","setState","graphType","Chart_type","chartType","showLine","showBar","showPie","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\n\nclass ChartContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {},\n      showLine: true,\n      showBar: false,\n      showPie: false,\n      fillFlag: false\n    }\n  }\n\n\n  componentDidMount() {\n    this.graphData();\n  }\n\ngraphData = () =>{\n\n  axios('https://praveesh91.github.io/test_json/parkingData.json')\n  .then((response) => {\n    const { parkingData } = response.data;\n    // const values = parkingData.map(d => d.vehicles.booked)\n    // const valus = parkingData.map(d => d.day)\n    const {fillFlag} = this.state\n    console.log(\"fillFlagInComponentDidMount=\", fillFlag);\n\n\n    const chartData = (canvas) => {\n      const ctx = canvas.getContext(\"2d\")\n      const solidRed = 'red'\n      const gradient = ctx.createLinearGradient(0, 0, 0, 450);\n      gradient.addColorStop(0, 'rgba(255, 0,0, 0.5)');\n      gradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.25)');\n      gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');\n      return {\n        labels: parkingData.map(k => k.day),\n        datasets: [\n            {\n            label: 'Booked',\n            fill: fillFlag ? true : false,\n            // fill: true,\n            data: parkingData.map(d => d.vehicles.booked),\n            backgroundColor: fillFlag ? gradient : solidRed,\n            borderColor: fillFlag ? 'transparent': 'red'\n            },\n            // {\n            //   label: 'Vacant',\n            //   // fill: true,\n            //   data: parkingData.map(d => d.vehicles.vacant),\n            //   backgroundColor: 'blue',\n            //   borderColor: 'blue',\n            // },\n            // {\n            //   label: 'Occupied',\n            //   // fill: 'false',\n            //   data: parkingData.map(d => d.vehicles.occupied),\n            //   backgroundColor: 'green',\n            //   borderColor: 'green',\n            // }\n        ],\n\n      }\n    }\n\n    this.setState({ chartData });\n  });\n}\n  \ngraphType = ()=>{\n\n  // const fillValue = {showLine ? true : false}\n  const Chart_type = this.props.chartType;\n  // console.log(\"Chart_type in ChartContainer is \",Chart_type);\n  if (Chart_type==='Line'){\n    this.setState({\n      showLine: true,\n      showBar: false,\n      showPie: false,\n      fillFlag: false\n    })\n  }\n  else if(Chart_type==='Bar'){\n      this.setState({\n        showLine: false,\n        showBar: true,\n        showPie: false,\n      })\n  }\n  else if(Chart_type===\"Pie\"){\n      this.setState({\n        showLine: false,\n        showBar: false,\n        showPie: true,\n        fillFlag: true\n      })\n  }\n\n}\n\nrender() {\n\n  const {showLine, showBar, showPie,chartData,fillFlag} = this.state;\n  console.log(\"chartData=\",chartData);\n  console.log(\"fillFlagOutsideComponentDidMount=\", fillFlag)\n\n  return (\n  <div>\n      {showLine && <Line data={chartData}/>}\n      {showBar && <Bar data={chartData}/>}\n      {showPie && <Line data={chartData}/>}\n  </div>\n  );\n}\n}\nexport default ChartContainer;\n"]},"metadata":{},"sourceType":"module"}