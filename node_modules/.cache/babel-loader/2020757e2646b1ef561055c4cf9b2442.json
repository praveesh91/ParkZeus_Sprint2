{"ast":null,"code":"var _jsxFileName = \"/home/praveesh/workspace/parkzeus/src/Components/Charts/ChartContainer/Chart.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.graphData = () => {\n      axios('https://praveesh91.github.io/test_json/parkingData.json').then(response => {\n        const {\n          parkingData\n        } = response.data; // const values = parkingData.map(d => d.vehicles.booked)\n        // const valus = parkingData.map(d => d.day)\n\n        const {\n          fillFlag\n        } = this.state;\n        console.log(\"fillFlagInComponentDidMount=\", fillFlag);\n\n        const chartData = canvas => {\n          const ctx = canvas.getContext(\"2d\");\n          const gradient = chart.createLinearGradient(0, 0, 0, 450);\n          gradient.addColorStop(0, 'rgba(255, 0,0, 0.5)');\n          gradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.25)');\n          gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');\n          return {\n            labels: parkingData.map(k => k.day),\n            datasets: [{\n              label: 'Booked',\n              fill: fillFlag ? true : false,\n              // fill: true,\n              data: parkingData.map(d => d.vehicles.booked),\n              backgroundColor: gradient,\n              borderColor: 'red'\n            } // {\n            //   label: 'Vacant',\n            //   // fill: true,\n            //   data: parkingData.map(d => d.vehicles.vacant),\n            //   backgroundColor: 'blue',\n            //   borderColor: 'blue',\n            // },\n            // {\n            //   label: 'Occupied',\n            //   // fill: 'false',\n            //   data: parkingData.map(d => d.vehicles.occupied),\n            //   backgroundColor: 'green',\n            //   borderColor: 'green',\n            // }\n            ]\n          };\n        };\n\n        this.setState({\n          chartData\n        });\n      });\n    };\n\n    this.graphType = () => {\n      // const fillValue = {showLine ? true : false}\n      const Chart_type = this.props.chartType; // console.log(\"Chart_type in ChartContainer is \",Chart_type);\n\n      if (Chart_type === 'Line') {\n        this.setState({\n          showLine: true,\n          showBar: false,\n          showPie: false,\n          fillFlag: false\n        });\n      } else if (Chart_type === 'Bar') {\n        this.setState({\n          showLine: false,\n          showBar: true,\n          showPie: false\n        });\n      } else if (Chart_type === \"Pie\") {\n        this.setState({\n          showLine: false,\n          showBar: false,\n          showPie: true,\n          fillFlag: true\n        });\n      }\n    };\n\n    this.state = {\n      chartData: {},\n      showLine: true,\n      showBar: false,\n      showPie: false,\n      fillFlag: false\n    };\n  }\n\n  componentDidMount() {\n    this.graphData();\n  }\n\n  render() {\n    const {\n      showLine,\n      showBar,\n      showPie,\n      chartData,\n      fillFlag\n    } = this.state;\n    console.log(\"chartData=\", chartData);\n    console.log(\"fillFlagOutsideComponentDidMount=\", fillFlag);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, showLine && React.createElement(Line, {\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), showBar && React.createElement(Bar, {\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), showPie && React.createElement(Line, {\n      data: chartData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChartContainer;","map":{"version":3,"sources":["/home/praveesh/workspace/parkzeus/src/Components/Charts/ChartContainer/Chart.js"],"names":["React","axios","Line","Bar","ChartContainer","Component","constructor","props","graphData","then","response","parkingData","data","fillFlag","state","console","log","chartData","canvas","ctx","getContext","gradient","chart","createLinearGradient","addColorStop","labels","map","k","day","datasets","label","fill","d","vehicles","booked","backgroundColor","borderColor","setState","graphType","Chart_type","chartType","showLine","showBar","showPie","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\n\nclass ChartContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {},\n      showLine: true,\n      showBar: false,\n      showPie: false,\n      fillFlag: false\n    }\n  }\n\n\n  componentDidMount() {\n    this.graphData();\n  }\n\ngraphData = () =>{\n\n  axios('https://praveesh91.github.io/test_json/parkingData.json')\n  .then((response) => {\n    const { parkingData } = response.data;\n    // const values = parkingData.map(d => d.vehicles.booked)\n    // const valus = parkingData.map(d => d.day)\n    const {fillFlag} = this.state\n    console.log(\"fillFlagInComponentDidMount=\", fillFlag);\n\n\n    const chartData = (canvas) => {\n      const ctx = canvas.getContext(\"2d\")\n      const gradient = chart.createLinearGradient(0, 0, 0, 450);\n      gradient.addColorStop(0, 'rgba(255, 0,0, 0.5)');\n      gradient.addColorStop(0.5, 'rgba(255, 0, 0, 0.25)');\n      gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');\n      return {\n        labels: parkingData.map(k => k.day),\n        datasets: [\n            {\n            label: 'Booked',\n            fill: fillFlag ? true : false,\n            // fill: true,\n            data: parkingData.map(d => d.vehicles.booked),\n            backgroundColor: gradient,\n            borderColor: 'red',\n            },\n            // {\n            //   label: 'Vacant',\n            //   // fill: true,\n            //   data: parkingData.map(d => d.vehicles.vacant),\n            //   backgroundColor: 'blue',\n            //   borderColor: 'blue',\n            // },\n            // {\n            //   label: 'Occupied',\n            //   // fill: 'false',\n            //   data: parkingData.map(d => d.vehicles.occupied),\n            //   backgroundColor: 'green',\n            //   borderColor: 'green',\n            // }\n        ],\n\n      }\n    }\n\n    this.setState({ chartData });\n  });\n}\n  \ngraphType = ()=>{\n\n  // const fillValue = {showLine ? true : false}\n  const Chart_type = this.props.chartType;\n  // console.log(\"Chart_type in ChartContainer is \",Chart_type);\n  if (Chart_type==='Line'){\n    this.setState({\n      showLine: true,\n      showBar: false,\n      showPie: false,\n      fillFlag: false\n    })\n  }\n  else if(Chart_type==='Bar'){\n      this.setState({\n        showLine: false,\n        showBar: true,\n        showPie: false,\n      })\n  }\n  else if(Chart_type===\"Pie\"){\n      this.setState({\n        showLine: false,\n        showBar: false,\n        showPie: true,\n        fillFlag: true\n      })\n  }\n\n}\n\nrender() {\n\n  const {showLine, showBar, showPie,chartData,fillFlag} = this.state;\n  console.log(\"chartData=\",chartData);\n  console.log(\"fillFlagOutsideComponentDidMount=\", fillFlag)\n\n  return (\n  <div>\n      {showLine && <Line data={chartData}/>}\n      {showBar && <Bar data={chartData}/>}\n      {showPie && <Line data={chartData}/>}\n  </div>\n  );\n}\n}\nexport default ChartContainer;\n"]},"metadata":{},"sourceType":"module"}